#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <windows.h>
#include <conio.h>



#define UP 0
#define DOWN 1
#define LEFT 2
#define RIGHT 3
#define SUBMIT 4

// 색 열거형 
enum {
    black,
    blue,
    green,
    cyan,
    red,
    purple,
    brown,
    lightgray,
    darkgray,
    lightblue,
    lightgreen,
    lightcyan,
    lightred,
    lightpurple,
    yellow,
    white
};
// 색 변환
void setColor(int forground, int background)
{
    HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
    int code = forground + background * 16;
    SetConsoleTextAttribute(consoleHandle, code);
}
// 이동
void gotoxy(int x, int y)
{
    HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
    COORD pos;
    pos.X = x;
    pos.Y = y;
    SetConsoleCursorPosition(consoleHandle, pos);
}
// 키 이동
int keyControl()
{
    char temp = _getch();

    if (temp == 'w' || temp == 'W')
    {
        return UP;
    }
    else if (temp == 'a' || temp == 'A')
    {
        return LEFT;
    }
    else if (temp == 's' || temp == 'S')
    {
        return DOWN;
    }
    else if (temp == 'd' || temp == 'D')
    {
        return RIGHT;
    }
    else if (temp == ' ')
    {
        return SUBMIT;

    }
}
// 창 크기 조절
void init()
{
    system("mode con cols=100 lines=40 | title 미로 탈출");

    HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
    CONSOLE_CURSOR_INFO ConsoleCursor;
    ConsoleCursor.bVisible = 0;
    ConsoleCursor.dwSize = 1;
    SetConsoleCursorInfo(consoleHandle, &ConsoleCursor);
}
// 타이틀 화면
void title()
{
    printf("\n\n\n\n");
    printf("  ^==============================================================================================^\n");
    printf("  |       ■■      ■■               ■■■              ■■■■■           ■■■■■■     | \n");
    printf("  |       ■ ■    ■ ■             ■      ■                   ■            ■               | \n");
    printf("  |       ■  ■  ■  ■            ■■■■■■               ■               ■■■■■■     | \n");
    printf("  |       ■   ■■   ■           ■          ■           ■                  ■               | \n");
    printf("  |       ■    ■    ■           ■          ■          ■■■■■■         ■■■■■■     | \n");
    printf("  ^==============================================================================================^ ");
}
// 타이틀 메뉴
int menuDraw()
{
    int x = 45;
    int y = 25;

    gotoxy(45, 25);
    printf("> 게 임 시 작");
    gotoxy(45, 26);
    printf("> 게 임 정 보");
    gotoxy(45, 27);
    printf("> 게 임 종 료");

    while (1) {
        int n = keyControl();
        switch (n) {
        case UP: {
            if (y > 25)
            {
                gotoxy(x - 4, y);
                printf(" ");
                gotoxy(x - 4, --y);
                printf(">");

            }
            break;
        }
        case DOWN: {
            if (y < 27)
            {
                gotoxy(x - 4, y);
                printf(" ");
                gotoxy(x - 4, ++y);
                printf(">");
            }
            break;
        }

        case SUBMIT: {
            return y - 25;
        }
        }
    }
}
// 게임 정보 화면
void infoDraw()
{
    system("cls");
    printf("\n\n");
    printf("                                             [ 조작법 ]\n\n\n\n");
    printf("                                          이동 : W, A, S, D\n\n\n\n");
    printf("                                       스페이스바 : 선택(메뉴)\n\n\n\n");
    printf("                                 스페이스바 : 처음부터 다시 하기(인게임)\n\n\n\n");

    printf("                                            [게임 설명]\n\n\n\n");
    printf("                 사용자의 좌표가 좌측 하단에 표시되고, 열쇠 수량은 우측 하단에 표시됩니다.\n\n\n\n");
    printf("                       열쇠는 소유하고 있는 상태에서 벽에 부딪히면 벽이 뚫리게 됩니다.\n\n\n\n");
    printf("                           실수로 뚫었다면, 스페이스바를 눌러 처음부터 다시하세요 !\n\n\n\n\n\n");
    printf("                            ");
    setColor(white, blue);
    printf("♡스페이스바를 누르면 메인 화면으로 이동합니다♡");
    setColor(white, black);
    while (1)
    {
        if (keyControl() == SUBMIT)
        {
            break;
        }
    }

}
// 종료화면
void EndDraw()
{
    system("cls");
    printf("\n\n");
    printf("                                              아쉽군요......\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    printf("                            ");
    setColor(white, red);
    printf("스페이스바를 한번 더 누르면 게임을 종료합니다.......\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
    setColor(white, black);
    printf("                                      ");
    setColor(white, blue);
    printf("다음에 또 찾아주세요..........");
    setColor(white, black);
    while (1)
    {
        if (keyControl() == SUBMIT)
        {
            break;
        }
    }

}
// 맵 선택
int maplistDraw()
{
    int x = 10;
    int y = 15;
    system("cls");
    printf("\n\n\n\n");
    printf("                                      [ 맵 난이도를 선택해주세요 ]\n\n");
    gotoxy(x, y);
    printf("                                  ☆ 쉬 움 ☆");
    gotoxy(x, y + 1);
    printf("                               ");
    setColor(white, red);
    printf("☆★ 어 려 움 ★☆");
    setColor(white, black);
    gotoxy(x, y + 2);
    printf("                                     뒤 로");

    while (1)
    {
        int n = keyControl();
        switch (n)
        {
        case UP: {
            if (y > 15)
            {
                gotoxy(x + 28, y);
                printf(" ");
                gotoxy(x + 28, --y);
                printf(">");
            }
            break;
        }
        case DOWN:
        {
            if (y < 17)
            {
                gotoxy(x + 28, y);
                printf(" ");
                gotoxy(x + 28, ++y);
                printf(">");
            }
            break;
        }
        case SUBMIT:
        {
            return y - 15;
        }
        }
    }
}
// 맵 임시저장 배열
char tempMap[34][100];
// 쉬운맵
char map1[34][100] =
{
{"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"},
{"100000000000000000010000000000000000000000000000000000000001000000000000000000100000000000000000001"},
{"100000000000000000010000000000000000000000000000000000000001000000000000000000100000000000000000q01"},
{"100000000000000000010000000000000000000000000000000000000001000000000000000000111111111111110000001"},
{"100000000000000000010000000000000000000000000000000000000001000000000100000000100000000000000000001"},
{"100000000000000000010000000000000000000000000000000000000001000000000100000000100000000000000000001"},
{"100000000000000000010000000000000000000000000000000000000001000000000100000000100000000000000000001"},
{"100000000000000000010000000000000000000000000000000000000001000000000100000000100000011111111111111"},
{"100000000010000000010000000000000000000000000000000000000001000000000100000000100000000000000000001"},
{"100000000010000000010000000000000000000000000000000000000001000000000100000000100000000000000000001"},
{"100000000010000000010000000000000000000000000000000000000001000000000100000000100000000000000000001"},
{"100000000010000000010000000000000000000000000000000000000001000000000100000000111111111111110000001"},
{"100000000010000000010000000000000000000000000000000000000001000000000100000000100000000000000000001"},
{"100000000010000000010000000000000000000000000000000000000001000000000100000000100000000000000000001"},
{"100000000010000000010000000000000000000000000000000000000001000000000100000000100000000000000000001"},
{"100000000010000000011111111111111111111111111111111111111111000000000100000000100000001111111111111"},
{"100000000010000000010000000000000000000000000001000000000000000000000100000000100000000000000000001"},
{"100000000010000000010000000000000000000000000k01000000000000000000000100000000100000000000000000001"},
{"100000000010000000010000000000000000000000000001000000000000000000000100000000100000000000000000001"},
{"100000000010000000011111111111110000000000000001000000000000000000000100000000111111111111110000001"},
{"100000000010000000010000000000000000000000000001000000000000000000000100000000100000000000000000001"},
{"100000000010000000010000000000000000000111111111111111111111111111111100000000100000000000000000001"},
{"100000000010000000010000000000000000000100000001000000000000000000000000000000100000000000000000001"},
{"100000000010000000010000000000000000000100000001000000000000000000000000000000100000001111111111111"},
{"100000000010000000010000000011111111111100000001000000000000000000000000000000100000000000000000001"},
{"100000000010000000010000000000000000000100000001000000000000000000000000000000100000000000000000001"},
{"100000000010000000010000000000000000000100000001111111111111111111110000000000000000000000000000001"},
{"100000000010000000010000000000000000000100000001000000000000000000000000000000000000000000000000001"},
{"100000000010000000011111111111000000000100000001000000000000000000000000000000000000000000000000001"},
{"100000000010000000000000000001000011111100000001000000000000000000000000000000111111111111111000001"},
{"1000000000100000000000000k0001000000000000000001111111111111111111111000000000100000000000000000001"},
{"10s000000010000000000000000001000000000000000001000000000000000000000000000000100000000000000000001"},
{"100000000010000000000000000001000000000000000001000000000000000000000000000000100000000000000000001"},
{"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"},
};
// 어려운 맵
char map2[34][100] =
{
{"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"},
{"10000000000010000000000001000000000000100000000000000000000001000000100000000000000010k000000000001"},
{"100000000000100000000000010000000000001000001000000000000000010000001000000000000000100000000000001"},
{"100000000000100000000000010000011111111000001000001000011000010000001000000010000000111111111000001"},
{"100000000000100000000000010000000000001000001111111000011000010000001000000010000000100000000000001"},
{"100000000000100000010000010000000000001000000000001000000000010000001000000011111111100000000000001"},
{"100000000000100000010000011111110000001000000000001000000000010000001000000010000000000000000000001"},
{"100000000000100000010000000000000000001111110000001111111000010000000000000010000000000011111111111"},
{"100000000000100000010000000000000000000000010000001000000000010000000000000010000000000000000000001"},
{"100000100000000000011111110000000000000000010000001000000000010000001000000000000000000000000000001"},
{"100000100000000000010000000000100000000000010000001000000000011111111111111111111111111111111100001"},
{"100000100000000000010000000000100000000000010000000000000000001000001000000000000000000000000100001"},
{"100000100000000000010000000000111111110000011110000000000000001000001000000111111111100000000100001"},
{"100000111111111111110000000000100000000000010000000000000001111111001000000100000000000000000100001"},
{"100000100000000000000000000000100000000000010000001111000000000000001000000100000000000000000100001"},
{"100000100000000000000000000000111111111100000000001111000000000111111000000100000001111110000000001"},
{"100000100000011111111111111111100000000100000000001111000000000100001000000100000000000010000000001"},
{"100000100000010000000000000000000000000100000100000000000000000100001000000000000000000010000000001"},
{"100000100000010000000000000000000000000000000100000000000000000100001000000000001000000010000000001"},
{"100000100000011111111111111111111111100000000111111111111111111100001000000000001000000000000000001"},
{"100000100000010000000000000000000000000000000100001000000000000000001000001000001000000000000010001"},
{"100000111111110000000000000000000000000000000100001000000000000000000000001000001000000000000010001"},
{"100000100000010000000011111100000000111110000100001000000000000000000000001000001000000010000010001"},
{"100000100000010000000011000000000000110000000100001111111111000000000000001000001000000010000010001"},
{"100000100000010000000011000000011111110000000100001000000001000000111111111000001000000011111110001"},
{"100000100000010000000011000000000000000000000100001000000001000000000000000000001000000010000000001"},
{"100000100000000000111111111111111111111111111100001000000001000000000000000000001000000010000000001"},
{"100000100000000000000011000000000000000000000000001000010001111111100000000000000000000010000000001"},
{"100000100000000000100011000000000000000000000000000000010001000000111111111100000000000011111111111"},
{"100000111111100000100011000000110000000100000000000000010001000000100000000000001111000010000000001"},
{"100000100000000000100000000000110000000100011111100000010000000000100000000000001000000010000000001"},
{"10s000100k00000000100000000001111111111100010000000000011111100000100000000000001000000010000000q01"},
{"100000100000000000100000000000000000000100010000000000010000100000100k00000000000000000010000000001"},
{"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"},
};
// 맵 변환
void drawMap(int* x, int* y)
{
    system("cls");
    int h, w;

    for (h = 0; h < 34; h++)
    {
        for (w = 0; w < 100; w++)
        {
            char temp = tempMap[h][w];
            if (temp == '0')
            {
                setColor(black, black);
                printf(" ");
            }
            else if (temp == '1')
            {
                setColor(red, red);
                printf("#");
            }
            else if (temp == 's')
            {
                *x = w;
                *y = h;
                setColor(cyan, black);
                printf("+");
            }
            else if (temp == 'q')
            {
                setColor(lightgreen, black);
                printf("!");
            }
            else if (temp == 'k')
            {
                setColor(yellow, black);
                printf("*");
            }
        }
        printf("\n");
    }
    setColor(white, black);
}
// UI
void drawUI(int* x, int* y, int* key)
{
    setColor(white, black);
    gotoxy(3, 36);
    printf("위치 : %d, %d", *x, *y);

    setColor(yellow, black);
    gotoxy(80, 36);
    printf("열쇠 : %d개", *key);
}
// 캐릭터 이동
void move(int* x, int* y, int _x, int _y, int* key, int* playing)
{
    char mapObject = tempMap[*y + _y][*x + _x];
    setColor(white, black);

    if (mapObject == '0')
    {
        gotoxy(*x, *y);
        printf(" ");

        setColor(cyan, black);
        gotoxy(*x + _x, *y + _y);
        printf("+");

        *x += _x;
        *y += _y;
    }

    else if (mapObject == 'k')
    {
        *key += 1;
        tempMap[*y + _y][*x + _x] = '0';
        gotoxy(*x + _x, *y + _y);
        printf(" ");
    }

    else if (mapObject == '1')
    {
        if (*key > 0)
        {
            *key -= 1;
            tempMap[*y + _y][*x + _x] = '0';
            setColor(white, black);
            gotoxy(*x + _x, *y + _y);
            printf(" ");
        }
    }

    else if (mapObject == 'q')
    {
        *playing = 0;
    }
}
// 루프설정
void gLoop(int mapCode)
{
    int x, y;
    int key = 0;
    int playing = 1;
    if (mapCode == 0)
    {
        memcpy(tempMap, map1, sizeof(tempMap));
    }
    else if (mapCode == 1)
    {
        memcpy(tempMap, map2, sizeof(tempMap));
    }

    drawMap(&x, &y);

    while (playing)
    {
        drawUI(&x, &y, &key);
        switch (keyControl())
        {
        case UP:
            move(&x, &y, 0, -1, &key, &playing);
            break;
        case DOWN:
            move(&x, &y, 0, 1, &key, &playing);
            break;
        case RIGHT:
            move(&x, &y, 1, 0, &key, &playing);
            break;
        case LEFT:
            move(&x, &y, -1, 0, &key, &playing);
            break;
        case SUBMIT:
            gotoxy(39, 15);
            printf("처음부터 다시 하세요 !");
            Sleep(3000);
            x = 97;
            y = 3;
            if (mapCode == 0)
            {
                memcpy(tempMap, map1, sizeof(tempMap));
            }
            else if (mapCode == 1)
            {
                memcpy(tempMap, map2, sizeof(tempMap));
            }
            drawMap(&x, &y);
        }

    }
    gotoxy(40, 14);
    printf("탈출 하셨습니다 !");
    gotoxy(37, 17);
    printf("메인 화면으로 돌아갑니다");
    Sleep(3000);
}



int main()
{
    init();
    while (1) {
        title();
        int menuCode = menuDraw();
        if (menuCode == 0)
        {
            int n = maplistDraw();

            if (n == 0)
            {
                gLoop(0);
            }
            else if (n == 1)
            {
                gLoop(1);
            }
        }
        else if (menuCode == 1)
        {
            infoDraw();
        }
        else if (menuCode == 2)
        {
            EndDraw();
            return 0;
        }
        system("cls");
        setColor(white, black);
    }


    return 0;

}